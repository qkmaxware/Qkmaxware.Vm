// qkvm docs --topic set | findstr "0x"
const instruction_list = {
    nop: {opcode: "0x00", alias: "nop", description: "Do nothing.", args: []},
    exit: {opcode: "0x01", alias: "exit", description: "Exit the program with the given status code. Status code 0 should indicate successful execution of the program.", args: [{name: "status code", type: "int32"}]},
    swap: {opcode: "0x02", alias: "swap", description: "Swap the positions of the top 2 elements on the operand stack.", args: []},
    dup: {opcode: "0x03", alias: "dup", description: "Duplicate the element at the top of the operand stack.", args: []},
    dup_block: {opcode: "0x04", alias: "dup_block", description: "Duplicate a block elements from the top of the operand stack.", args: [{name: "block size", type: "int32"}]},
    dup_below: {opcode: "0x05", alias: "dup_below", description: "Duplicate a value below the top of the stack given by the depth argument and place the result on the top of the stack.", args: [{name: "stack depth", type: "int32"}]},
    pop: {opcode: "0x06", alias: "pop", description: "Remove the value at the top of the operand stack.", args: []},
    pop_n: {opcode: "0x07", alias: "pop_n", description: "Remove the given amount of values from the top of the operand stack.", args: [{name: "amount", type: "int32"}]},
    load_const: {opcode: "0x0B", alias: "load_const", description: "Push a value from the constant pool onto the top of the stack.", args: [{name: "constant index", type: "int32"}]},
    immediate_i32: {opcode: "0x10", alias: "immediate_i32", description: "Push an immediate integer value on top of the operand stack.", args: [{name: "value", type: "int32"}]},
    add_i32: {opcode: "0x11", alias: "add_i32", description: "Arithmetic addition between 2 integers at the top of the operand stack.", args: []},
    sub_i32: {opcode: "0x12", alias: "sub_i32", description: "Arithmetic subtraction between 2 integers at the top of the operand stack.", args: []},
    mul_i32: {opcode: "0x13", alias: "mul_i32", description: "Arithmetic multiplication between 2 integers at the top of the operand stack.", args: []},
    div_i32: {opcode: "0x14", alias: "div_i32", description: "Arithmetic division between 2 integers at the top of the operand stack.", args: []},
    rem_i32: {opcode: "0x15", alias: "rem_i32", description: "Arithmetic remainder between 2 integers at the top of the operand stack.", args: []},
    mod_i32: {opcode: "0x16", alias: "mod_i32", description: "Arithmetic modulus between 2 integers at the top of the operand stack.", args: []},
    neg_i32: {opcode: "0x17", alias: "neg_i32", description: "Negation of the integer value on top of the operand stack.", args: []},
    left_shift_i32: {opcode: "0x18", alias: "left_shift_i32", description: "Left shift the elements of one integer by another.", args: []},
    right_shift_arithmetic_i32: {opcode: "0x19", alias: "right_shift_arithmetic_i32", description: "Arithmetic right shift the elements of one integer by another.", args: []},
    right_shift_logical_i32: {opcode: "0x1A", alias: "right_shift_logical_i32", description: "Logical right shift the elements of one integer by another.", args: []},
    and_i32: {opcode: "0x1B", alias: "and_i32", description: "Bitwise AND between 2 integers at the top of the operand stack.", args: []},
    or_i32: {opcode: "0x1C", alias: "or_i32", description: "Bitwise OR between 2 integers at the top of the operand stack.", args: []},
    xor_i32: {opcode: "0x1D", alias: "xor_i32", description: "Bitwise Exclusive OR between 2 integers at the top of the operand stack.", args: []},
    complement_i32: {opcode: "0x1E", alias: "complement_i32", description: "Bitwise complement of the integer value on top of the operand stack.", args: []},
    immediate_u32: {opcode: "0x20", alias: "immediate_u32", description: "Push an immediate unsigned integer value on top of the operand stack.", args: [{name: "value", type: "uint32"}]},
    add_u32: {opcode: "0x21", alias: "add_u32", description: "Arithmetic addition between 2 unsigned integers at the top of the operand stack.", args: []},
    sub_u32: {opcode: "0x22", alias: "sub_u32", description: "Arithmetic subtraction between 2 unsigned integers at the top of the operand stack.", args: []},
    mul_u32: {opcode: "0x23", alias: "mul_u32", description: "Arithmetic multiplication between 2 unsigned integers at the top of the operand stack.", args: []},
    div_u32: {opcode: "0x24", alias: "div_u32", description: "Arithmetic division between 2 unsigned integers at the top of the operand stack.", args: []},
    rem_u32: {opcode: "0x25", alias: "rem_u32", description: "Arithmetic remainder between 2 unsigned integers at the top of the operand stack.", args: []},
    left_shift_u32: {opcode: "0x26", alias: "left_shift_u32", description: "Left shift the elements of one unsigned integer by another.", args: []},
    right_shift_u32: {opcode: "0x27", alias: "right_shift_u32", description: "Right shift the elements of one unsigned integer by another.", args: []},
    and_u32: {opcode: "0x28", alias: "and_u32", description: "Bitwise AND between 2 unsigned integers at the top of the operand stack.", args: []},
    or_u32: {opcode: "0x29", alias: "or_u32", description: "Bitwise OR between 2 unsigned integers at the top of the operand stack.", args: []},
    xor_u32: {opcode: "0x2A", alias: "xor_u32", description: "Bitwise Exclusive OR between 2 unsigned integers at the top of the operand stack.", args: []},
    flip_u32: {opcode: "0x2B", alias: "flip_u32", description: "Bitwise flip of the integer value on top of the operand stack.", args: []},
    immediate_f32: {opcode: "0x30", alias: "immediate_f32", description: "Push an immediate floating-point value on top of the operand stack.", args: [{name: "value", type: "float32"}]},
    add_f32: {opcode: "0x31", alias: "add_f32", description: "Arithmetic addition between 2 floating-point values at the top of the operand stack.", args: []},
    sub_f32: {opcode: "0x32", alias: "sub_f32", description: "Arithmetic subtraction between 2 floating-point values at the top of the operand stack.", args: []},
    mul_f32: {opcode: "0x33", alias: "mul_f32", description: "Arithmetic multiplication between 2 floating-point values at the top of the operand stack.", args: []},
    div_f32: {opcode: "0x34", alias: "div_f32", description: "Arithmetic division between 2 floating-point values at the top of the operand stack.", args: []},
    rem_f32: {opcode: "0x35", alias: "rem_f32", description: "Arithmetic remainder between 2 floating-point values at the top of the operand stack.", args: []},
    pow_f32: {opcode: "0x36", alias: "pow_f32", description: "Arithmetic exponentiation between 2 floating-point values at the top of the operand stack.", args: []},
    neg_f32: {opcode: "0x37", alias: "neg_f32", description: "Negation of the floating-point value on top of the operand stack.", args: []},
    i32_to_f32: {opcode: "0x40", alias: "i32_to_f32", description: "Convert the top of the stack from an 32bit integer to a 32bit floating point number.", args: []},
    i32_to_u32: {opcode: "0x41", alias: "i32_to_u32", description: "Convert the top of the stack from an 32bit integer to a 32bit unsigned integer.", args: []},
    u32_to_i32: {opcode: "0x42", alias: "u32_to_i32", description: "Convert the top of the stack from an 32bit unsigned integer to a 32bit integer.", args: []},
    u32_to_f32: {opcode: "0x43", alias: "u32_to_f32", description: "Convert the top of the stack from an 32bit unsigned integer to a 32bit floating point value.", args: []},
    f32_to_i32: {opcode: "0x44", alias: "f32_to_i32", description: "Convert the top of the stack from an 32bit floating point number to a 32bit integer.", args: []},
    f32_to_u32: {opcode: "0x45", alias: "f32_to_u32", description: "Convert the top of the stack from an 32bit floating point number to a 32bit unsigned integer.", args: []},
    sizeof: {opcode: "0x50", alias: "sizeof", description: "Using a pointer at the top of the operand stack, determine the size of the object in bytes and place that value on top of the operand stack.", args: []},
    len: {opcode: "0x51", alias: "len", description: "Using a pointer to an array at the top of the operand stack, determine the length of the array and place that value on top of the operand stack.", args: []},
    get_element: {opcode: "0x52", alias: "get_element", description: "Using a pointer to an array at the top of the operand stack, fetch s particular element in that array and place that value on top of the operand stack.", args: []},
    alloc: {opcode: "0x53", alias: "alloc", description: "Allocate a contiguous block of memory in the heap.", args: []},
    free: {opcode: "0x56", alias: "free", description: "Free a reserved block of memory in the heap.", args: []},
    goto: {opcode: "0x60", alias: "goto", description: " Jump to another position in the program at PC + Offset.", args: [{name: "offset", type: "int32"}]},
    goto_if_zero: {opcode: "0x61", alias: "goto_if_zero", description: "If the top of the stack is an integer equal to 0 then jump to another position in the program at PC + Offset.", args: [{name: "offset", type: "int32"}]},
    goto_if_nzero: {opcode: "0x62", alias: "goto_if_nzero", description: "If the top of the stack is an integer not equal to 0 then jump to another position in the program at PC + Offset.", args: [{name: "offset", type: "int32"}]},
    call: {opcode: "0x63", alias: "call", description: "Call a subprogram in the program at PC + Offset using the last few vales on the operand stack as the subprogram arguments.", args: [{name: "offset", type: "int32"}, {name: "arg count", type: "int32"}]},
    call_external: {opcode: "0x64", alias: "call_external", description: "Call an imported subprogram at the given import index.", args: [{name: "import index", type: "int32"}]},
    return_function: {opcode: "0x65", alias: "return_function", description: "Return from a subprogram to it's original call location preserving the top of the operand stack as a returned value.", args: []},
    return_procedure: {opcode: "0x66", alias: "return_procedure", description: "Return from a subprogram to it's original call location with no return value.", args: []},
    load_arg: {opcode: "0x67", alias: "load_arg", description: "In the given subprogram, load a value from a subprogram argument onto the top of the operand stack.", args: [{name: "argument index", type: "int32"}]},
    load_local: {opcode: "0x68", alias: "load_local", description: "In the given subprogram, load a value from a local variable onto the top of the operand stack.", args: [{name: "local index", type: "int32"}]},
    store_local: {opcode: "0x69", alias: "store_local", description: "Save a value on the top of the stack into a local variable in the current subprogram.", args: [{name: "local index", type: "int32"}]},
    putchar: {opcode: "0x80", alias: "putchar", description: "Treat the element at the top of the stack as a character and print it to the standard output device.", args: []},



    // MACROS
    printstr : {opcode: "macro", alias: "!printstr", description: "Assuming the top of the stack is a pointer to an array of characters, print the characters to standard output.", args:[]},
    immediate_ascii : {opcode: "macro", alias: "!immediate_ascii", description: "Create an ascii encoded string constant and load it onto the stack.", args:[{name: "value", type: "string"}]},
    immediate_utf8 : {opcode: "macro", alias: "!immediate_utf8", description: "Create a utf8 encoded string constant and load it onto the stack.", args:[{name: "value", type: "string"}]},
    immediate_utf32 : {opcode: "macro", alias: "!immediate_utf32", description: "Create a utf32 encoded string constant and load it onto the stack.", args:[{name: "value", type: "string"}]},
};

module.exports = {
    Instructions: instruction_list
};